{"version":3,"sources":["api.ts","Comment.tsx","CommentList.tsx","User.tsx","Post.tsx","PostList.tsx","App.tsx","index.tsx"],"names":["getAll","url","fetch","then","response","json","Comment","comment","name","email","body","CommentList","comments","map","className","User","users","user","address","street","suite","city","zipcode","Post","post","title","PostList","posts","App","useState","postBefore","setPostBefore","setPost","isLoading","setLoading","isLoaded","setLoaded","isLoad","a","userFromServer","postFromServer","commentsFromServer","preperedListOfPosts","item","filter","itemId","id","userId","postId","type","onClick","filteredPost","sort","b","localeCompare","ReactDOM","render","document","getElementById"],"mappings":"iSAIMA,G,MAAS,SAAIC,GACjB,OAAOC,MAHM,iEAGSD,GACnBE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YCehBC,EAdkB,SAAC,GAAwC,IAAD,IAArCC,QAAWC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,KAE1D,OACE,oCACE,2BAAIF,GACJ,2BACGC,EACA,KAEH,2BAAIC,KCOKC,EAfsB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtC,OACE,oCACE,4BACGA,EAASC,KAAI,SAAAN,GAAO,OACnB,wBAAIO,UAAU,cACZ,kBAAC,EAAD,CAASP,QAASA,WCcfQ,EAtBe,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC/B,OACE,oCACGA,EAAMH,KAAI,SAAAI,GAAI,OACb,2BACGA,EAAKT,KACL,IACAS,EAAKR,MACL,IACAQ,EAAKC,QAAQC,OACb,IACAF,EAAKC,QAAQE,MACb,IACAH,EAAKC,QAAQG,KACb,IACAJ,EAAKC,QAAQI,cCDTC,EAXe,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC/B,OACE,oCACE,4BAAKA,EAAKC,OACV,2BAAID,EAAKd,MACT,kBAAC,EAAD,CAAMM,MAAOQ,EAAKP,OAClB,kBAAC,EAAD,CAAaL,SAAUY,EAAKZ,aCUnBc,EAjBmB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnC,OACE,oCAEE,oCACE,4BACGA,EAAMd,KAAI,SAAAW,GAAI,OACb,4BACE,kBAAC,EAAD,CAAMA,KAAMA,YC6CXI,EAtDH,WAAO,IAAD,EACoBC,mBAAkB,IADtC,mBACTC,EADS,KACGC,EADH,OAESF,mBAAkB,IAF3B,mBAETF,EAFS,KAEFK,EAFE,OAGgBH,oBAAS,GAHzB,mBAGTI,EAHS,KAGEC,EAHF,OAIcL,oBAAS,GAJvB,mBAITM,EAJS,KAICC,EAJD,KAMVC,EAAM,uCAAG,kCAAAC,EAAA,6DACbJ,GAAW,GADE,SNHalC,EAAc,eMG3B,cAEPuC,EAFO,gBNJYvC,EAAc,eMI1B,cAGPwC,EAHO,gBNFgBxC,EAAiB,kBMEjC,OAIPyC,EAJO,OAMPC,EAAsBF,EAAe3B,KAAI,SAAA8B,GAAI,kCAC9CA,GAD8C,IAEjD1B,KAAMsB,EAAeK,QAAO,SAAAC,GAAM,OAAKA,EAAOC,KAAOH,EAAKI,UAC1DnC,SAAU6B,EAAmBG,QAAO,SAAAI,GAAM,OAAKA,EAAOA,SAAWL,EAAKI,eAGxEf,EAAQU,GACRX,EAAcW,GACdR,GAAW,GACXE,GAAU,GAfG,4CAAH,qDAkCZ,OACE,oCACE,4BAAQa,KAAK,SAASC,QAdD,WACvB,IAAMC,EAAe,YAAIxB,GAAOyB,MAAK,SAACd,EAAGe,GAAJ,OAAUf,EAAEb,MAAM6B,cAAcD,EAAE5B,UAEvEO,EAAQmB,KAWN,mBACA,4BAAQF,KAAK,SAASC,QATF,WACtB,IAAMC,EAAe,YAAIxB,GAAOyB,MAAK,SAACd,EAAGe,GAAJ,OAAUf,EAAE5B,KAAK4C,cAAcD,EAAE3C,SAEtEsB,EAAQmB,KAMN,kBACA,4BAAQF,KAAK,SAASC,QApBP,WACjBlB,EAAQF,KAmBN,SACEK,EAIE,kBAAC,EAAD,CAAUR,MAAOA,IAHnB,4BAAQsB,KAAK,SAASC,QAASb,GAC5BJ,EAAY,aAAe,UCjDtCsB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.cd5ecc3f.chunk.js","sourcesContent":["import { Posts, Users, Comments } from './helper';\n\nconst ApoUrl = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\nconst getAll = <T>(url: string): Promise<T[]> => {\n  return fetch(ApoUrl + url)\n    .then(response => response.json());\n};\n\nexport const getPost = () => getAll<Posts>('/posts.json');\nexport const getUsers = () => getAll<Users>('/users.json');\nexport const getComments = () => getAll<Comments>('/comments.json');\n","import React from 'react';\nimport { Comments } from './helper';\n\ntype Props = {\n  comment: Comments;\n};\n\nconst Comment: React.FC<Props> = ({ comment: { name, email, body } }) => {\n  // console.log(comment)\n  return (\n    <>\n      <p>{name}</p>\n      <p>\n        {email}\n        {' '}\n      </p>\n      <p>{body}</p>\n    </>\n  );\n};\n\nexport default Comment;\n","import React from 'react';\nimport Comment from './Comment';\nimport { Comments } from './helper';\n\ntype Props = {\n  comments: Comments[];\n};\n\nconst CommentList: React.FC<Props> = ({ comments }) => {\n  return (\n    <>\n      <ul>\n        {comments.map(comment => (\n          <li className=\"li__inside\">\n            <Comment comment={comment} />\n          </li>\n        ))}\n      </ul>\n    </>\n\n  );\n};\n\nexport default CommentList;\n","import React from 'react';\nimport { Users } from './helper';\n\ntype Props = {\n  users: Users[];\n};\nconst User: React.FC<Props> = ({ users }) => {\n  return (\n    <>\n      {users.map(user => (\n        <p>\n          {user.name}\n          {' '}\n          {user.email}\n          {' '}\n          {user.address.street}\n          {' '}\n          {user.address.suite}\n          {' '}\n          {user.address.city}\n          {' '}\n          {user.address.zipcode}\n        </p>\n      ))}\n    </>\n  );\n};\n\nexport default User;\n","import React from 'react';\nimport { Posts } from './helper';\nimport CommentList from './CommentList';\nimport User from './User';\n\ntype Props = {\n  post: Posts;\n};\n\nconst Post: React.FC<Props> = ({ post }) => {\n  return (\n    <>\n      <h2>{post.title}</h2>\n      <p>{post.body}</p>\n      <User users={post.user} />\n      <CommentList comments={post.comments} />\n    </>\n  );\n};\n\nexport default Post;\n","import React from 'react';\nimport { Posts } from './helper';\nimport Post from './Post';\n\ntype Props = {\n  posts: Posts[];\n};\n\nconst PostList: React.FC<Props> = ({ posts }) => {\n  return (\n    <>\n\n      <>\n        <ul>\n          {posts.map(post => (\n            <li>\n              <Post post={post} />\n            </li>\n          ))}\n        </ul>\n      </>\n    </>\n  );\n};\n\nexport default PostList;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport { getPost, getUsers, getComments } from './api';\nimport { Posts } from './helper';\nimport PostList from './PostList';\n\nconst App = () => {\n  const [postBefore, setPostBefore] = useState<Posts[]>([]);\n  const [posts, setPost] = useState<Posts[]>([]);\n  const [isLoading, setLoading] = useState(false);\n  const [isLoaded, setLoaded] = useState(false);\n\n  const isLoad = async () => {\n    setLoading(true);\n    const userFromServer = await getUsers();\n    const postFromServer = await getPost();\n    const commentsFromServer = await getComments();\n\n    const preperedListOfPosts = postFromServer.map(item => ({\n      ...item,\n      user: userFromServer.filter(itemId => (itemId.id === item.userId)),\n      comments: commentsFromServer.filter(postId => (postId.postId === item.userId)),\n    }));\n\n    setPost(preperedListOfPosts);\n    setPostBefore(preperedListOfPosts);\n    setLoading(false);\n    setLoaded(true);\n  };\n\n  const handlReset = () => {\n    setPost(postBefore);\n  };\n\n  const handlTitleFilter = () => {\n    const filteredPost = [...posts].sort((a, b) => a.title.localeCompare(b.title));\n\n    setPost(filteredPost);\n  };\n\n  const handlBodyFilter = () => {\n    const filteredPost = [...posts].sort((a, b) => a.body.localeCompare(b.body));\n\n    setPost(filteredPost);\n  };\n\n  return (\n    <>\n      <button type=\"button\" onClick={handlTitleFilter}>Filter By Title</button>\n      <button type=\"button\" onClick={handlBodyFilter}>Filter By body</button>\n      <button type=\"button\" onClick={handlReset}>Reset</button>\n      {!isLoaded ? (\n        <button type=\"button\" onClick={isLoad}>\n          {isLoading ? 'Loading...' : 'Load'}\n        </button>\n      ) : <PostList posts={posts} />}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}