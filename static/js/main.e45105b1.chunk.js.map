{"version":3,"sources":["api.ts","helper.ts","CommentItem.tsx","CommentList.tsx","UserItem.tsx","Post.tsx","PostList.tsx","App.tsx","index.tsx"],"names":["getAll","url","fetch","then","response","json","ensure","argument","message","undefined","TypeError","CommentItem","comment","name","email","body","CommentList","comments","map","className","key","id","UserItem","user","address","street","suite","city","zipcode","Post","post","title","PostList","posts","App","useState","filteredPost","setfilteredPost","setPost","isLoading","setLoading","isLoaded","setLoaded","error","setError","isLoad","a","userFromServer","postFromServer","commentsFromServer","preperedListOfPosts","item","find","itemId","userId","filter","postId","type","onChange","event","text","target","value","filtered","includes","onClick","length","ReactDOM","render","document","getElementById"],"mappings":"iSAIMA,G,MAAS,SAAIC,GACjB,OAAOC,MAHM,iEAGSD,GACnBE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YCyBxB,SAASC,EAAUC,GAAsF,IAAtDC,EAAqD,uDAA3C,uCAClE,QAAiBC,IAAbF,GAAuC,OAAbA,EAC5B,MAAM,IAAIG,UAAUF,GAGtB,OAAOD,EC7BT,IAaeI,EAbsB,SAAC,GAAwC,IAAD,IAArCC,QAAWC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,KAC9D,OACE,oCACE,2BAAIF,GACJ,2BACGC,EACA,KAEH,2BAAIC,KCQKC,EAfsB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtC,OACE,oCACE,4BACGA,EAASC,KAAI,SAAAN,GAAO,OACnB,wBAAIO,UAAU,aAAaC,IAAKR,EAAQS,IACtC,kBAAC,EAAD,CAAaT,QAASA,WCYnBU,EApBmB,SAAC,GAAwC,IAAD,IAArCC,KAAQV,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,MAAOU,EAAgB,EAAhBA,QACxD,OACE,oCACE,2BACGX,EACA,IACAC,EACA,IACAU,EAAQC,OACR,IACAD,EAAQE,MACR,IACAF,EAAQG,KACR,IACAH,EAAQI,WCAFC,EAXe,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC/B,OACE,oCACE,4BAAKA,EAAKC,OACV,2BAAID,EAAKf,MACT,kBAAC,EAAD,CAAUQ,KAAMO,EAAKP,OACrB,kBAAC,EAAD,CAAaN,SAAUa,EAAKb,aCUnBe,EAjBmB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnC,OACE,oCAEE,oCACE,4BACGA,EAAMf,KAAI,SAAAY,GAAI,OACb,wBAAIV,IAAKU,EAAKT,IACZ,kBAAC,EAAD,CAAMS,KAAMA,YCsDXI,EA/DH,WAAO,IAAD,EACwBC,mBAAkB,IAD1C,mBACTC,EADS,KACKC,EADL,OAESF,mBAAkB,IAF3B,mBAETF,EAFS,KAEFK,EAFE,OAGgBH,oBAAS,GAHzB,mBAGTI,EAHS,KAGEC,EAHF,OAIcL,oBAAS,GAJvB,mBAITM,EAJS,KAICC,EAJD,OAKUP,mBAAS,IALnB,mBAKTQ,EALS,KAKFC,EALE,KAOVC,EAAM,uCAAG,kCAAAC,EAAA,6DACbN,GAAW,GADE,kBPJaxC,EAAa,eOI1B,cAIL+C,EAJK,gBPLY/C,EAAc,eOK1B,cAKLgD,EALK,iBPHgBhD,EAAgB,kBOGhC,QAMLiD,EANK,OAQLC,EAAsBF,EAAe9B,KAAI,SAAAiC,GAAI,kCAC9CA,GAD8C,IAEjD5B,KAAMjB,EAAOyC,EAAeK,MAAK,SAAAC,GAAM,OAAKA,EAAOhC,KAAO8B,EAAKG,WAC/DrC,SAAUgC,EAAmBM,QAAO,SAAAC,GAAM,OAAKA,EAAOA,SAAWL,EAAKG,eAGxEhB,EAAQY,GACRV,GAAW,GACXE,GAAU,GAhBC,kDAkBXE,EAAS,6BACTF,GAAU,GACVF,GAAW,GApBA,0DAAH,qDAiCZ,OACE,oCACGC,GAEG,2BAAOgB,KAAK,OAAOC,SAbP,SAACC,GACnB,IAAMC,EAAOD,EAAME,OAAOC,MAEpBC,EAAW,YAAI9B,GAClBsB,QAAO,SAAAJ,GAAI,OAAIA,EAAKpB,MAAMiC,SAASJ,IAAST,EAAKpC,KAAKiD,SAASJ,MAElEvB,EAAgB0B,OASZtB,GAEE,4BAAQgB,KAAK,SAASQ,QAASpB,GAC5BN,EAAY,aAAe,QAKjCH,EAAa8B,OAAS,EACnB,kBAAC,EAAD,CAAUjC,MAAOG,IACjB,kBAAC,EAAD,CAAUH,MAAOA,IAEpBU,GAAS,2BAAIA,KC5DpBwB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.e45105b1.chunk.js","sourcesContent":["import { Posts, User, Comment } from './helper';\n\nconst ApoUrl = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\nconst getAll = <T>(url: string): Promise<T[]> => {\n  return fetch(ApoUrl + url)\n    .then(response => response.json());\n};\n\nexport const getPost = () => getAll<Posts>('/posts.json');\nexport const getUsers = () => getAll<User>('/users.json');\nexport const getComments = () => getAll<Comment>('/comments.json');\n","export interface Posts {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n  user: User;\n  comments: Comment[];\n}\n\nexport interface User{\n  id: number;\n  name: string;\n  email: string;\n  address: Address;\n}\n\nexport interface Comment {\n  postId: number;\n  id: number;\n  name: string;\n  email: string;\n  body: string;\n}\n\nexport interface Address {\n  street: string;\n  suite: string;\n  city: string;\n  zipcode: string;\n}\n\nexport function ensure<T>(argument: T | undefined | null, message = 'This value was promised to be there.'): T {\n  if (argument === undefined || argument === null) {\n    throw new TypeError(message);\n  }\n\n  return argument;\n}\n","import React from 'react';\nimport { Comment } from './helper';\n\ntype Props = {\n  comment: Comment;\n};\n\nconst CommentItem: React.FC<Props> = ({ comment: { name, email, body } }) => {\n  return (\n    <>\n      <p>{name}</p>\n      <p>\n        {email}\n        {' '}\n      </p>\n      <p>{body}</p>\n    </>\n  );\n};\n\nexport default CommentItem;\n","import React from 'react';\nimport CommentItem from './CommentItem';\nimport { Comment } from './helper';\n\ntype Props = {\n  comments: Comment[];\n};\n\nconst CommentList: React.FC<Props> = ({ comments }) => {\n  return (\n    <>\n      <ul>\n        {comments.map(comment => (\n          <li className=\"li__inside\" key={comment.id}>\n            <CommentItem comment={comment} />\n          </li>\n        ))}\n      </ul>\n    </>\n\n  );\n};\n\nexport default CommentList;\n","import React from 'react';\nimport { User } from './helper';\n\ntype Props = {\n  user: User;\n};\nconst UserItem: React.FC<Props> = ({ user: { name, email, address } }) => {\n  return (\n    <>\n      <p>\n        {name}\n        {' '}\n        {email}\n        {' '}\n        {address.street}\n        {' '}\n        {address.suite}\n        {' '}\n        {address.city}\n        {' '}\n        {address.zipcode}\n      </p>\n    </>\n  );\n};\n\nexport default UserItem;\n","import React from 'react';\nimport { Posts } from './helper';\nimport CommentList from './CommentList';\nimport UserItem from './UserItem';\n\ntype Props = {\n  post: Posts;\n};\n\nconst Post: React.FC<Props> = ({ post }) => {\n  return (\n    <>\n      <h2>{post.title}</h2>\n      <p>{post.body}</p>\n      <UserItem user={post.user} />\n      <CommentList comments={post.comments} />\n    </>\n  );\n};\n\nexport default Post;\n","import React from 'react';\nimport { Posts } from './helper';\nimport Post from './Post';\n\ntype Props = {\n  posts: Posts[];\n};\n\nconst PostList: React.FC<Props> = ({ posts }) => {\n  return (\n    <>\n\n      <>\n        <ul>\n          {posts.map(post => (\n            <li key={post.id}>\n              <Post post={post} />\n            </li>\n          ))}\n        </ul>\n      </>\n    </>\n  );\n};\n\nexport default PostList;\n","import React, { useState, ChangeEvent } from 'react';\nimport './App.css';\n\nimport { getPost, getUsers, getComments } from './api';\nimport { Posts, ensure } from './helper';\nimport PostList from './PostList';\n\nconst App = () => {\n  const [filteredPost, setfilteredPost] = useState<Posts[]>([]);\n  const [posts, setPost] = useState<Posts[]>([]);\n  const [isLoading, setLoading] = useState(false);\n  const [isLoaded, setLoaded] = useState(false);\n  const [error, setError] = useState('');\n\n  const isLoad = async () => {\n    setLoading(true);\n\n    try {\n      const userFromServer = await getUsers();\n      const postFromServer = await getPost();\n      const commentsFromServer = await getComments();\n\n      const preperedListOfPosts = postFromServer.map(item => ({\n        ...item,\n        user: ensure(userFromServer.find(itemId => (itemId.id === item.userId))),\n        comments: commentsFromServer.filter(postId => (postId.postId === item.userId)),\n      }));\n\n      setPost(preperedListOfPosts);\n      setLoading(false);\n      setLoaded(true);\n    } catch (e) {\n      setError('Cant load List, try later');\n      setLoaded(false);\n      setLoading(false);\n    }\n  };\n\n  const handlfilter = (event: ChangeEvent<HTMLInputElement>) => {\n    const text = event.target.value;\n\n    const filtered = [...posts]\n      .filter(item => item.title.includes(text) || item.body.includes(text));\n\n    setfilteredPost(filtered);\n  };\n\n  return (\n    <>\n      {isLoaded\n        && (\n          <input type=\"text\" onChange={handlfilter} />\n        )}\n      {!isLoaded\n        && (\n          <button type=\"button\" onClick={isLoad}>\n            {isLoading ? 'Loading...' : 'Load'}\n          </button>\n        )}\n\n\n      {filteredPost.length > 0\n        ? <PostList posts={filteredPost} />\n        : <PostList posts={posts} />}\n\n      {error && <p>{error}</p>}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}